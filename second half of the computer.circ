<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="2.7.1" version="1.0">
This file is intended to be loaded by Logisim (http://www.cburch.com/logisim/).
<lib desc="#Wiring" name="0"/>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4">
    <tool name="ROM">
      <a name="contents">addr/data: 8 8
0
</a>
    </tool>
  </lib>
  <lib desc="#I/O" name="5"/>
  <lib desc="#Base" name="6">
    <tool name="Text Tool">
      <a name="text" val=""/>
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="valign" val="base"/>
    </tool>
  </lib>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="6" map="Button2" name="Menu Tool"/>
    <tool lib="6" map="Button3" name="Menu Tool"/>
    <tool lib="6" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="6" name="Poke Tool"/>
    <tool lib="6" name="Edit Tool"/>
    <tool lib="6" name="Text Tool">
      <a name="text" val=""/>
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="valign" val="base"/>
    </tool>
    <sep/>
    <tool lib="0" name="Pin">
      <a name="tristate" val="false"/>
    </tool>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </tool>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate">
      <a name="size" val="30"/>
      <a name="inputs" val="2"/>
    </tool>
    <tool lib="1" name="OR Gate"/>
  </toolbar>
  <circuit name="main">
    <a name="circuit" val="main"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
  </circuit>
  <circuit name="Right shifter">
    <a name="circuit" val="Right shifter"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(370,370)" to="(430,370)"/>
    <wire from="(460,290)" to="(490,290)"/>
    <wire from="(320,380)" to="(350,380)"/>
    <wire from="(370,300)" to="(490,300)"/>
    <wire from="(370,310)" to="(490,310)"/>
    <wire from="(370,320)" to="(490,320)"/>
    <wire from="(370,330)" to="(490,330)"/>
    <wire from="(370,340)" to="(490,340)"/>
    <wire from="(370,350)" to="(490,350)"/>
    <wire from="(370,360)" to="(490,360)"/>
    <wire from="(320,380)" to="(320,390)"/>
    <wire from="(450,230)" to="(460,230)"/>
    <wire from="(430,460)" to="(440,460)"/>
    <wire from="(560,300)" to="(560,330)"/>
    <wire from="(220,380)" to="(290,380)"/>
    <wire from="(300,400)" to="(300,430)"/>
    <wire from="(460,230)" to="(460,290)"/>
    <wire from="(430,370)" to="(430,460)"/>
    <wire from="(580,280)" to="(750,280)"/>
    <wire from="(510,280)" to="(550,280)"/>
    <comp lib="0" loc="(440,460)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val="shift out"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="6" loc="(784,540)" name="Text">
      <a name="text" val="8-Bit Right Shifter"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp lib="0" loc="(300,430)" name="Pin">
      <a name="facing" val="north"/>
      <a name="tristate" val="false"/>
      <a name="label" val="se 1"/>
    </comp>
    <comp lib="0" loc="(560,330)" name="Pin">
      <a name="facing" val="north"/>
      <a name="tristate" val="false"/>
      <a name="label" val="se 2"/>
    </comp>
    <comp lib="6" loc="(1102,622)" name="Text">
      <a name="text" val="An 8-bit right shifter is like a toy train with 8 cars (bits) on a track, sliding all the cars one spot to the right! If the input is 10101010, a right shift moves each bit one position right, turning 10101010 into 01010101—the rightmost bit (0) falls off, and a 0 is added on the left."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(750,280)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
      <a name="label" val="output"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="6" loc="(637,659)" name="Text">
      <a name="text" val="It’s used for dividing numbers by 2 (e.g., 10101010, which is 170, becomes 01010101, which is 85) and for bit manipulation in programming."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="4" loc="(580,280)" name="Register"/>
    <comp lib="0" loc="(350,380)" name="Splitter">
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="0" loc="(220,380)" name="Pin">
      <a name="width" val="8"/>
      <a name="tristate" val="false"/>
      <a name="label" val="input"/>
    </comp>
    <comp lib="4" loc="(320,380)" name="Register"/>
    <comp lib="0" loc="(510,280)" name="Splitter">
      <a name="facing" val="west"/>
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="0" loc="(450,230)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="shift in "/>
    </comp>
  </circuit>
  <circuit name="Left shifter">
    <a name="circuit" val="Left shifter"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(540,230)" to="(660,230)"/>
    <wire from="(540,240)" to="(660,240)"/>
    <wire from="(540,250)" to="(660,250)"/>
    <wire from="(540,260)" to="(660,260)"/>
    <wire from="(540,270)" to="(660,270)"/>
    <wire from="(540,280)" to="(660,280)"/>
    <wire from="(540,290)" to="(660,290)"/>
    <wire from="(660,300)" to="(660,340)"/>
    <wire from="(490,320)" to="(520,320)"/>
    <wire from="(640,340)" to="(660,340)"/>
    <wire from="(540,170)" to="(590,170)"/>
    <wire from="(490,320)" to="(490,330)"/>
    <wire from="(680,220)" to="(720,220)"/>
    <wire from="(730,240)" to="(730,270)"/>
    <wire from="(470,340)" to="(470,370)"/>
    <wire from="(540,170)" to="(540,220)"/>
    <wire from="(390,320)" to="(460,320)"/>
    <wire from="(520,300)" to="(520,320)"/>
    <wire from="(750,220)" to="(920,220)"/>
    <comp lib="0" loc="(390,320)" name="Pin">
      <a name="width" val="8"/>
      <a name="tristate" val="false"/>
      <a name="label" val="input"/>
    </comp>
    <comp lib="0" loc="(470,370)" name="Pin">
      <a name="facing" val="north"/>
      <a name="tristate" val="false"/>
      <a name="label" val="se 1"/>
    </comp>
    <comp lib="6" loc="(707,488)" name="Text">
      <a name="text" val="8-Bit Left Shifter"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp lib="4" loc="(490,320)" name="Register"/>
    <comp lib="0" loc="(920,220)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
      <a name="label" val="output"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="4" loc="(750,220)" name="Register"/>
    <comp lib="0" loc="(680,220)" name="Splitter">
      <a name="facing" val="west"/>
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="0" loc="(590,170)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val="shift out"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(730,270)" name="Pin">
      <a name="facing" val="north"/>
      <a name="tristate" val="false"/>
      <a name="label" val="se 2"/>
    </comp>
    <comp lib="0" loc="(520,300)" name="Splitter">
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="6" loc="(1307,544)" name="Text">
      <a name="text" val="An 8-bit left shifter is like that same toy train, but sliding all 8 cars one spot to the left! So, 10101010 becomes 01010100—the leftmost bit (1) falls off, and a 0 is added on the right. It’s used for multiplying numbers by 2 (e.g., 10101010, which is 170, becomes 01010100, which is 84 in 8 bits due to overflow) and aligning bits in data processing."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(640,340)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="shift in "/>
    </comp>
  </circuit>
  <circuit name="Half adder">
    <a name="circuit" val="Half adder"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(550,330)" to="(620,330)"/>
    <wire from="(510,370)" to="(620,370)"/>
    <wire from="(480,290)" to="(510,290)"/>
    <wire from="(510,290)" to="(510,370)"/>
    <wire from="(550,250)" to="(550,330)"/>
    <wire from="(670,350)" to="(780,350)"/>
    <wire from="(550,250)" to="(580,250)"/>
    <wire from="(480,250)" to="(550,250)"/>
    <wire from="(510,290)" to="(580,290)"/>
    <wire from="(640,270)" to="(780,270)"/>
    <comp lib="6" loc="(475,679)" name="Text">
      <a name="text" val="For example, if A = 1 and B = 1, C = 1; otherwise, C = 0."/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="0" loc="(780,270)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" sum "/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(480,290)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="b"/>
    </comp>
    <comp lib="0" loc="(480,250)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="a"/>
    </comp>
    <comp lib="1" loc="(640,270)" name="XOR Gate">
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="0" loc="(780,350)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" carry"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="1" loc="(670,350)" name="AND Gate">
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="6" loc="(579,559)" name="Text">
      <a name="text" val=". Sum (S): The sum is 1 if exactly one car fits (A or B, but not both). This is an XOR operation: S = A XOR B."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(814,516)" name="Text">
      <a name="text" val="A half adder is like a tiny toy calculator that adds two 1-bit numbers (A and B) and gives a 1-bit sum (S) and a 1-bit carry (C). Imagine two toy cars (A and B) trying to fit on one parking spot:"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(574,636)" name="Text">
      <a name="text" val=". Carry (C): The carry is 1 if both cars try to fit (A and B are both 1). This is an AND operation: C = A AND B."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(505,595)" name="Text">
      <a name="text" val="For example, if A = 1 and B = 0, S = 1; if A = 1 and B = 1, S = 0."/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="6" loc="(691,467)" name="Text">
      <a name="text" val="How it works"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp lib="6" loc="(479,735)" name="Text">
      <a name="text" val="A half adder doesn’t handle a carry-in from a previous bit, so it’s only part of the story."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
  </circuit>
  <circuit name="Full adder">
    <a name="circuit" val="Full adder"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(310,140)" to="(310,210)"/>
    <wire from="(170,320)" to="(330,320)"/>
    <wire from="(400,250)" to="(430,250)"/>
    <wire from="(400,290)" to="(430,290)"/>
    <wire from="(270,100)" to="(290,100)"/>
    <wire from="(310,210)" to="(330,210)"/>
    <wire from="(380,230)" to="(400,230)"/>
    <wire from="(380,300)" to="(400,300)"/>
    <wire from="(170,120)" to="(170,320)"/>
    <wire from="(190,80)" to="(190,280)"/>
    <wire from="(400,290)" to="(400,300)"/>
    <wire from="(310,140)" to="(460,140)"/>
    <wire from="(150,120)" to="(170,120)"/>
    <wire from="(190,80)" to="(210,80)"/>
    <wire from="(480,270)" to="(650,270)"/>
    <wire from="(290,100)" to="(290,250)"/>
    <wire from="(290,100)" to="(460,100)"/>
    <wire from="(400,230)" to="(400,250)"/>
    <wire from="(140,210)" to="(310,210)"/>
    <wire from="(190,280)" to="(330,280)"/>
    <wire from="(520,120)" to="(650,120)"/>
    <wire from="(170,120)" to="(210,120)"/>
    <wire from="(150,80)" to="(190,80)"/>
    <wire from="(290,250)" to="(330,250)"/>
    <comp lib="6" loc="(586,495)" name="Text">
      <a name="text" val=". Sum (S): The sum is 1 if an odd number of inputs (A, B, Cin) are 1. This is an XOR of all three: S = A XOR B XOR Cin."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(480,270)" name="OR Gate">
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="1" loc="(270,100)" name="XOR Gate">
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="0" loc="(150,120)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="b"/>
    </comp>
    <comp lib="6" loc="(1183,452)" name="Text">
      <a name="text" val="A full adder is like a bigger toy calculator that adds three 1-bit numbers: A, B, and a carry-in (Cin) from a previous addition, producing a 1-bit sum (S) and a 1-bit carry-out (Cout). It’s what we need for an 8-bit adder, where each bit position needs to handle a carry from the previous bit."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(519,531)" name="Text">
      <a name="text" val="For example, if A = 1, B = 1, Cin = 0, then S = 0 (1 + 1 + 0 = 10 in binary)."/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="0" loc="(150,80)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="a"/>
    </comp>
    <comp lib="0" loc="(650,120)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" sum "/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="6" loc="(472,615)" name="Text">
      <a name="text" val="For example, if A = 1, B = 1, Cin = 0, Cout = 1 (from A AND B)."/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="0" loc="(140,210)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="carry in"/>
    </comp>
    <comp lib="6" loc="(1000,653)" name="Text">
      <a name="text" val="A full adder is crucial because it’s like a super toy calculator that adds three bits at once—A, B, and a carry-in—making it possible to chain them together for adding big numbers like in our 8-bit adder, without missing any carryovers"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(603,572)" name="Text">
      <a name="text" val=". Carry-Out (Cout): The carry-out is 1 if at least two inputs are 1. This is: Cout = (A AND B) OR (A AND Cin) OR (B AND Cin)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(380,300)" name="AND Gate">
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="0" loc="(650,270)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" carry out"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="1" loc="(380,230)" name="AND Gate">
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="1" loc="(520,120)" name="XOR Gate">
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="6" loc="(665,403)" name="Text">
      <a name="text" val="How it works"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
  </circuit>
  <circuit name="comparator">
    <a name="circuit" val="comparator"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(450,150)" to="(450,220)"/>
    <wire from="(530,220)" to="(530,260)"/>
    <wire from="(920,230)" to="(920,340)"/>
    <wire from="(450,220)" to="(480,220)"/>
    <wire from="(690,100)" to="(900,100)"/>
    <wire from="(620,120)" to="(640,120)"/>
    <wire from="(620,150)" to="(1120,150)"/>
    <wire from="(320,100)" to="(640,100)"/>
    <wire from="(430,150)" to="(450,150)"/>
    <wire from="(320,130)" to="(370,130)"/>
    <wire from="(250,170)" to="(370,170)"/>
    <wire from="(510,220)" to="(530,220)"/>
    <wire from="(450,150)" to="(620,150)"/>
    <wire from="(570,80)" to="(640,80)"/>
    <wire from="(550,310)" to="(550,340)"/>
    <wire from="(940,60)" to="(940,180)"/>
    <wire from="(570,50)" to="(570,80)"/>
    <wire from="(620,120)" to="(620,150)"/>
    <wire from="(250,130)" to="(320,130)"/>
    <wire from="(320,100)" to="(320,130)"/>
    <wire from="(570,80)" to="(570,260)"/>
    <wire from="(900,100)" to="(900,180)"/>
    <comp lib="6" loc="(615,413)" name="Text">
      <a name="text" val="How it works"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp lib="0" loc="(570,50)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
    </comp>
    <comp lib="0" loc="(550,340)" name="Pin">
      <a name="facing" val="north"/>
      <a name="output" val="true"/>
      <a name="label" val="all bits equal so far"/>
      <a name="labelloc" val="south"/>
    </comp>
    <comp lib="6" loc="(356,462)" name="Text">
      <a name="text" val="A single bit comparator is a circuit that compares two bits, a and b"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(1120,150)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" c"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(250,130)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="a "/>
    </comp>
    <comp lib="6" loc="(160,658)" name="Text">
      <a name="text" val="Outputs:"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="6" loc="(161,510)" name="Text">
      <a name="text" val="Inputs:"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="0" loc="(920,340)" name="Pin">
      <a name="facing" val="north"/>
      <a name="output" val="true"/>
      <a name="label" val="'a' larger"/>
      <a name="labelloc" val="south"/>
    </comp>
    <comp lib="6" loc="(530,142)" name="Text">
      <a name="text" val="unequal"/>
    </comp>
    <comp lib="1" loc="(510,220)" name="NOT Gate">
      <a name="label" val="2"/>
    </comp>
    <comp lib="6" loc="(573,18)" name="Text">
      <a name="text" val="all bits above are equal"/>
    </comp>
    <comp lib="0" loc="(940,60)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
      <a name="label" val="'a' larger"/>
      <a name="labelloc" val="north"/>
    </comp>
    <comp lib="6" loc="(516,612)" name="Text">
      <a name="text" val=". “A larger from above” (1 if ‘a’ is already determined to be larger; a constant 0 for the top unit)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(508,850)" name="Text">
      <a name="text" val="The outputs are passed to the next unit to continue the comparison, helping comparing 16 bits."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(489,704)" name="Text">
      <a name="text" val=". ‘c’: From an XOR gate (a XOR b), outputs 1 if a ≠ b, indicating a difference at this position."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(458,574)" name="Text">
      <a name="text" val=". “All bits above are equal” (1 if higher bits match; a constant 1 for the top unit)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(250,170)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="b "/>
    </comp>
    <comp lib="1" loc="(550,310)" name="AND Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
      <a name="label" val="3"/>
    </comp>
    <comp lib="1" loc="(430,150)" name="XOR Gate">
      <a name="inputs" val="2"/>
      <a name="label" val="1"/>
    </comp>
    <comp lib="6" loc="(432,735)" name="Text">
      <a name="text" val=". “Equal”: From a NOT-XOR gate, outputs 1 if a = b, showing the bits match."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(841,761)" name="Text">
      <a name="text" val=". “A larger”: Outputs 1 if a = 1, b = 0 (a is larger, and 0 if a is smaller than b), and all higher bits are equal (computed by ANDing a[i], the XOR output, and the “all bits above are equal” input)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(690,100)" name="AND Gate">
      <a name="inputs" val="3"/>
      <a name="label" val="4"/>
    </comp>
    <comp lib="6" loc="(522,215)" name="Text">
      <a name="text" val="equal"/>
    </comp>
    <comp lib="6" loc="(317,542)" name="Text">
      <a name="text" val=". Bits a and b (the bits being compared)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(920,230)" name="OR Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
      <a name="label" val="5"/>
    </comp>
    <comp lib="6" loc="(153,802)" name="Text">
      <a name="text" val="Function:"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
  </circuit>
  <circuit name="8 bit comparator">
    <a name="circuit" val="8 bit comparator"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(820,620)" to="(820,630)"/>
    <wire from="(560,240)" to="(610,240)"/>
    <wire from="(810,150)" to="(810,160)"/>
    <wire from="(560,380)" to="(750,380)"/>
    <wire from="(620,340)" to="(810,340)"/>
    <wire from="(750,200)" to="(810,200)"/>
    <wire from="(840,140)" to="(1130,140)"/>
    <wire from="(770,300)" to="(810,300)"/>
    <wire from="(630,200)" to="(630,290)"/>
    <wire from="(870,200)" to="(870,290)"/>
    <wire from="(560,480)" to="(800,480)"/>
    <wire from="(830,310)" to="(830,330)"/>
    <wire from="(820,260)" to="(820,280)"/>
    <wire from="(830,410)" to="(830,430)"/>
    <wire from="(830,210)" to="(830,230)"/>
    <wire from="(820,160)" to="(820,180)"/>
    <wire from="(820,360)" to="(820,380)"/>
    <wire from="(820,460)" to="(820,480)"/>
    <wire from="(740,150)" to="(740,360)"/>
    <wire from="(590,280)" to="(590,490)"/>
    <wire from="(780,350)" to="(780,430)"/>
    <wire from="(910,280)" to="(910,490)"/>
    <wire from="(640,240)" to="(810,240)"/>
    <wire from="(790,400)" to="(810,400)"/>
    <wire from="(850,160)" to="(1130,160)"/>
    <wire from="(820,510)" to="(820,610)"/>
    <wire from="(560,280)" to="(590,280)"/>
    <wire from="(590,490)" to="(810,490)"/>
    <wire from="(560,400)" to="(760,400)"/>
    <wire from="(830,510)" to="(830,570)"/>
    <wire from="(860,180)" to="(860,240)"/>
    <wire from="(870,200)" to="(1130,200)"/>
    <wire from="(610,390)" to="(810,390)"/>
    <wire from="(740,150)" to="(810,150)"/>
    <wire from="(770,300)" to="(770,420)"/>
    <wire from="(640,180)" to="(640,240)"/>
    <wire from="(840,490)" to="(910,490)"/>
    <wire from="(560,180)" to="(640,180)"/>
    <wire from="(900,260)" to="(900,440)"/>
    <wire from="(600,260)" to="(600,440)"/>
    <wire from="(820,80)" to="(820,130)"/>
    <wire from="(860,180)" to="(1130,180)"/>
    <wire from="(580,430)" to="(580,440)"/>
    <wire from="(840,390)" to="(890,390)"/>
    <wire from="(560,360)" to="(740,360)"/>
    <wire from="(630,290)" to="(810,290)"/>
    <wire from="(760,250)" to="(810,250)"/>
    <wire from="(840,440)" to="(900,440)"/>
    <wire from="(880,220)" to="(1130,220)"/>
    <wire from="(560,220)" to="(620,220)"/>
    <wire from="(560,140)" to="(810,140)"/>
    <wire from="(560,500)" to="(810,500)"/>
    <wire from="(560,260)" to="(600,260)"/>
    <wire from="(800,450)" to="(800,480)"/>
    <wire from="(560,460)" to="(790,460)"/>
    <wire from="(850,160)" to="(850,190)"/>
    <wire from="(840,340)" to="(880,340)"/>
    <wire from="(900,260)" to="(1130,260)"/>
    <wire from="(650,160)" to="(650,190)"/>
    <wire from="(830,360)" to="(830,380)"/>
    <wire from="(830,160)" to="(830,180)"/>
    <wire from="(830,260)" to="(830,280)"/>
    <wire from="(830,460)" to="(830,480)"/>
    <wire from="(820,410)" to="(820,430)"/>
    <wire from="(820,210)" to="(820,230)"/>
    <wire from="(820,310)" to="(820,330)"/>
    <wire from="(890,240)" to="(890,390)"/>
    <wire from="(830,50)" to="(830,130)"/>
    <wire from="(890,240)" to="(1130,240)"/>
    <wire from="(760,250)" to="(760,400)"/>
    <wire from="(610,240)" to="(610,390)"/>
    <wire from="(840,240)" to="(860,240)"/>
    <wire from="(560,440)" to="(580,440)"/>
    <wire from="(900,570)" to="(900,610)"/>
    <wire from="(560,420)" to="(770,420)"/>
    <wire from="(600,440)" to="(810,440)"/>
    <wire from="(780,350)" to="(810,350)"/>
    <wire from="(910,280)" to="(1130,280)"/>
    <wire from="(650,190)" to="(810,190)"/>
    <wire from="(840,290)" to="(870,290)"/>
    <wire from="(560,160)" to="(650,160)"/>
    <wire from="(790,400)" to="(790,460)"/>
    <wire from="(620,220)" to="(620,340)"/>
    <wire from="(580,430)" to="(780,430)"/>
    <wire from="(560,200)" to="(630,200)"/>
    <wire from="(880,220)" to="(880,340)"/>
    <wire from="(830,570)" to="(900,570)"/>
    <wire from="(800,450)" to="(810,450)"/>
    <wire from="(840,190)" to="(850,190)"/>
    <wire from="(810,80)" to="(820,80)"/>
    <wire from="(550,500)" to="(560,500)"/>
    <wire from="(750,200)" to="(750,380)"/>
    <comp lib="0" loc="(560,420)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="16"/>
    </comp>
    <comp lib="0" loc="(560,180)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="32"/>
    </comp>
    <comp lib="0" loc="(1130,180)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="6" loc="(423,1179)" name="Text">
      <a name="text" val=". Contributes to the final “equal” and “a larger” outputs."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(560,240)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="4"/>
    </comp>
    <comp lib="0" loc="(1130,260)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="6" loc="(222,1222)" name="Text">
      <a name="text" val="Function:"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="6" loc="(1054,927)" name="Text">
      <a name="text" val="An 8-bit comparator compares two 8-bit inputs, ‘a[i]’ and ‘b[i]’ (16 bits total), using 8 single bit comparators stacked from bit 7 (most significant) to bit 0 (least significant), functioning like a complete Enigma machine deciphering two 8-bit messages."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp loc="(840,440)" name="comparator"/>
    <comp lib="6" loc="(846,683)" name="Text">
      <a name="text" val="Approach: The Comparator as an Enigma Codebreaker"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp loc="(1600,350)" name="comparator"/>
    <comp lib="0" loc="(1130,280)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="6" loc="(222,1342)" name="Text">
      <a name="text" val="Example:"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="6" loc="(1294,731)" name="Text">
      <a name="text" val="Imagine the 8-bit comparator as a World War II Enigma machine, used by codebreakers like Alan Turing to decipher enemy messages. Each single bit comparator is like a rotor in the Enigma, analyzing one pair of letters (bits a[i] and b[i]) in a coded message."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(560,440)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="8"/>
    </comp>
    <comp lib="6" loc="(585,1410)" name="Text">
      <a name="text" val=". At bit 6: a[6] = 1, b[6] = 0, bit 7 matches, so “a larger” is 1, “equal” is 0, and ‘c’ at bit 6 is 1 (bits differ)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp loc="(840,290)" name="comparator"/>
    <comp lib="6" loc="(622,1271)" name="Text">
      <a name="text" val=". “Equal”: Outputs 1 if all bits match (computed by ANDing all “equal” outputs from each unit), meaning ‘a’ = ‘b’."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(416,1008)" name="Text">
      <a name="text" val=". Bits a[i] and b[i] (e.g., a[7] and b[7] for the top unit)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(830,50)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
    </comp>
    <comp lib="6" loc="(1591,806)" name="Text">
      <a name="text" val="The static 1 and 0 at the top are the initial settings of the machine, starting the decoding process. The full 8-bit comparator, with its 8 rotors, deciphers the entire message (‘a’ vs. ‘b’), outputting whether the codes are identical (“equal”) or if one is greater (“a larger”), just like breaking an 8-letter Enigma code to reveal a hidden instruction."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(1199,208)" name="Text">
      <a name="text" val="c"/>
    </comp>
    <comp lib="0" loc="(820,610)" name="Pin">
      <a name="facing" val="north"/>
      <a name="output" val="true"/>
      <a name="label" val=" equal"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(1130,220)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(1130,240)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(560,200)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="16"/>
    </comp>
    <comp lib="6" loc="(218,1103)" name="Text">
      <a name="text" val="Outputs:"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="6" loc="(487,213)" name="Text">
      <a name="text" val="a"/>
    </comp>
    <comp lib="6" loc="(1987,768)" name="Text">
      <a name="text" val="The rotor’s job is to check if the letters match (‘c’ output: 1 if they differ, like spotting a mismatch in the code), if they’re the same (“equal” output: 1 if a[i] = b[i], like confirming a correct letter pair), and if one letter is “larger” (a[i] = 1, b[i] = 0, like determining which code has a higher value at this position). The “all bits above are equal” signal is like a codebreaker’s log, ensuring all previous letters matched before deciding which code is “larger.”"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(810,80)" name="Constant">
      <a name="facing" val="south"/>
    </comp>
    <comp loc="(840,390)" name="comparator"/>
    <comp lib="0" loc="(560,160)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="64"/>
    </comp>
    <comp lib="6" loc="(219,974)" name="Text">
      <a name="text" val="Inputs:"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp loc="(840,240)" name="comparator"/>
    <comp lib="0" loc="(900,610)" name="Pin">
      <a name="facing" val="north"/>
      <a name="output" val="true"/>
      <a name="label" val=" 'a' larger"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(1130,200)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(560,500)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="1"/>
    </comp>
    <comp lib="0" loc="(560,280)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="1"/>
    </comp>
    <comp loc="(840,340)" name="comparator"/>
    <comp lib="6" loc="(399,1380)" name="Text">
      <a name="text" val=". ‘a’ = 128+64+1 (11000001, 193), ‘b’ = 10101010 (170)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(560,220)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="8"/>
    </comp>
    <comp lib="0" loc="(560,460)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="4"/>
    </comp>
    <comp lib="6" loc="(673,877)" name="Text">
      <a name="text" val="How it works"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp lib="0" loc="(560,480)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="2"/>
    </comp>
    <comp loc="(840,490)" name="comparator"/>
    <comp lib="6" loc="(645,1052)" name="Text">
      <a name="text" val=". “All bits above are equal” and “a larger from above” signals from the previous unit (or constants for the top unit)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp loc="(840,190)" name="comparator"/>
    <comp lib="0" loc="(560,360)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="128"/>
    </comp>
    <comp lib="6" loc="(608,1148)" name="Text">
      <a name="text" val=". c’: From an XOR gate (a[i] XOR b[i]), outputs 1 if bits differ, used for zero detection or difference checking."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(1130,140)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp loc="(840,140)" name="comparator"/>
    <comp lib="0" loc="(560,400)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="32"/>
    </comp>
    <comp lib="0" loc="(560,260)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="2"/>
    </comp>
    <comp lib="0" loc="(1130,160)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(560,140)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="128"/>
    </comp>
    <comp lib="6" loc="(730,1301)" name="Text">
      <a name="text" val=". “A larger”: Outputs 1 if ‘a’ &gt; ‘b’ (determined by the first unit where a[i] = 1, b[i] = 0, and higher bits are equal, propagated through OR gates)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(560,380)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="64"/>
    </comp>
    <comp lib="6" loc="(485,436)" name="Text">
      <a name="text" val="b"/>
    </comp>
  </circuit>
  <circuit name="ALU">
    <a name="circuit" val="ALU"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(450,160)" to="(700,160)"/>
    <wire from="(530,260)" to="(710,260)"/>
    <wire from="(870,190)" to="(870,200)"/>
    <wire from="(890,170)" to="(890,180)"/>
    <wire from="(420,660)" to="(470,660)"/>
    <wire from="(870,140)" to="(930,140)"/>
    <wire from="(420,500)" to="(420,510)"/>
    <wire from="(420,620)" to="(420,630)"/>
    <wire from="(230,600)" to="(410,600)"/>
    <wire from="(250,400)" to="(250,480)"/>
    <wire from="(890,180)" to="(930,180)"/>
    <wire from="(290,440)" to="(400,440)"/>
    <wire from="(720,710)" to="(830,710)"/>
    <wire from="(380,750)" to="(420,750)"/>
    <wire from="(380,710)" to="(420,710)"/>
    <wire from="(470,640)" to="(510,640)"/>
    <wire from="(390,770)" to="(420,770)"/>
    <wire from="(390,810)" to="(420,810)"/>
    <wire from="(250,480)" to="(410,480)"/>
    <wire from="(420,560)" to="(450,560)"/>
    <wire from="(530,260)" to="(530,1010)"/>
    <wire from="(550,460)" to="(710,460)"/>
    <wire from="(450,760)" to="(470,760)"/>
    <wire from="(450,800)" to="(470,800)"/>
    <wire from="(480,550)" to="(500,550)"/>
    <wire from="(250,220)" to="(390,220)"/>
    <wire from="(250,140)" to="(390,140)"/>
    <wire from="(170,680)" to="(430,680)"/>
    <wire from="(1030,160)" to="(1080,160)"/>
    <wire from="(710,720)" to="(710,730)"/>
    <wire from="(510,640)" to="(510,650)"/>
    <wire from="(250,480)" to="(250,610)"/>
    <wire from="(870,150)" to="(930,150)"/>
    <wire from="(430,870)" to="(1060,870)"/>
    <wire from="(440,850)" to="(440,860)"/>
    <wire from="(230,490)" to="(410,490)"/>
    <wire from="(250,770)" to="(360,770)"/>
    <wire from="(1030,490)" to="(1070,490)"/>
    <wire from="(290,260)" to="(390,260)"/>
    <wire from="(290,180)" to="(390,180)"/>
    <wire from="(420,630)" to="(420,660)"/>
    <wire from="(720,240)" to="(830,240)"/>
    <wire from="(720,160)" to="(830,160)"/>
    <wire from="(720,440)" to="(830,440)"/>
    <wire from="(720,600)" to="(830,600)"/>
    <wire from="(440,860)" to="(1050,860)"/>
    <wire from="(420,1030)" to="(520,1030)"/>
    <wire from="(380,720)" to="(420,720)"/>
    <wire from="(380,760)" to="(420,760)"/>
    <wire from="(290,440)" to="(290,850)"/>
    <wire from="(190,440)" to="(290,440)"/>
    <wire from="(460,620)" to="(1000,620)"/>
    <wire from="(830,160)" to="(830,200)"/>
    <wire from="(830,200)" to="(830,240)"/>
    <wire from="(250,610)" to="(410,610)"/>
    <wire from="(390,780)" to="(420,780)"/>
    <wire from="(390,820)" to="(420,820)"/>
    <wire from="(450,770)" to="(470,770)"/>
    <wire from="(450,730)" to="(470,730)"/>
    <wire from="(900,170)" to="(930,170)"/>
    <wire from="(250,310)" to="(390,310)"/>
    <wire from="(420,510)" to="(430,510)"/>
    <wire from="(420,630)" to="(430,630)"/>
    <wire from="(420,510)" to="(420,560)"/>
    <wire from="(580,730)" to="(710,730)"/>
    <wire from="(440,240)" to="(700,240)"/>
    <wire from="(440,600)" to="(700,600)"/>
    <wire from="(830,440)" to="(830,490)"/>
    <wire from="(710,170)" to="(710,180)"/>
    <wire from="(710,250)" to="(710,260)"/>
    <wire from="(710,450)" to="(710,460)"/>
    <wire from="(190,400)" to="(250,400)"/>
    <wire from="(880,180)" to="(880,190)"/>
    <wire from="(900,160)" to="(900,170)"/>
    <wire from="(870,120)" to="(930,120)"/>
    <wire from="(870,200)" to="(930,200)"/>
    <wire from="(520,180)" to="(710,180)"/>
    <wire from="(490,710)" to="(490,720)"/>
    <wire from="(430,850)" to="(430,870)"/>
    <wire from="(250,140)" to="(250,220)"/>
    <wire from="(290,180)" to="(290,260)"/>
    <wire from="(710,610)" to="(710,640)"/>
    <wire from="(830,240)" to="(830,330)"/>
    <wire from="(290,350)" to="(390,350)"/>
    <wire from="(250,220)" to="(250,310)"/>
    <wire from="(720,330)" to="(830,330)"/>
    <wire from="(720,490)" to="(830,490)"/>
    <wire from="(500,520)" to="(500,550)"/>
    <wire from="(830,330)" to="(1070,330)"/>
    <wire from="(290,260)" to="(290,350)"/>
    <wire from="(380,690)" to="(420,690)"/>
    <wire from="(380,730)" to="(420,730)"/>
    <wire from="(830,200)" to="(850,200)"/>
    <wire from="(830,600)" to="(830,710)"/>
    <wire from="(390,790)" to="(420,790)"/>
    <wire from="(390,830)" to="(420,830)"/>
    <wire from="(250,610)" to="(250,770)"/>
    <wire from="(440,610)" to="(460,610)"/>
    <wire from="(450,780)" to="(470,780)"/>
    <wire from="(450,740)" to="(470,740)"/>
    <wire from="(290,850)" to="(370,850)"/>
    <wire from="(520,180)" to="(520,1010)"/>
    <wire from="(440,330)" to="(700,330)"/>
    <wire from="(440,490)" to="(700,490)"/>
    <wire from="(570,640)" to="(710,640)"/>
    <wire from="(500,670)" to="(570,670)"/>
    <wire from="(710,340)" to="(710,350)"/>
    <wire from="(710,500)" to="(710,510)"/>
    <wire from="(880,190)" to="(930,190)"/>
    <wire from="(1050,840)" to="(1050,860)"/>
    <wire from="(870,130)" to="(930,130)"/>
    <wire from="(430,500)" to="(430,510)"/>
    <wire from="(180,490)" to="(230,490)"/>
    <wire from="(430,620)" to="(430,630)"/>
    <wire from="(460,610)" to="(460,620)"/>
    <wire from="(580,730)" to="(580,1010)"/>
    <wire from="(570,640)" to="(570,670)"/>
    <wire from="(440,480)" to="(1000,480)"/>
    <wire from="(250,310)" to="(250,400)"/>
    <wire from="(540,350)" to="(540,1010)"/>
    <wire from="(570,670)" to="(570,1010)"/>
    <wire from="(290,350)" to="(290,440)"/>
    <wire from="(540,350)" to="(710,350)"/>
    <wire from="(380,700)" to="(420,700)"/>
    <wire from="(380,740)" to="(420,740)"/>
    <wire from="(870,170)" to="(890,170)"/>
    <wire from="(980,160)" to="(1000,160)"/>
    <wire from="(830,330)" to="(830,440)"/>
    <wire from="(560,510)" to="(710,510)"/>
    <wire from="(830,490)" to="(830,600)"/>
    <wire from="(390,800)" to="(420,800)"/>
    <wire from="(390,840)" to="(420,840)"/>
    <wire from="(1050,840)" to="(1060,840)"/>
    <wire from="(490,710)" to="(700,710)"/>
    <wire from="(450,790)" to="(470,790)"/>
    <wire from="(450,750)" to="(470,750)"/>
    <wire from="(230,490)" to="(230,600)"/>
    <wire from="(550,460)" to="(550,1010)"/>
    <wire from="(870,160)" to="(900,160)"/>
    <wire from="(560,570)" to="(560,1010)"/>
    <wire from="(490,520)" to="(500,520)"/>
    <wire from="(500,650)" to="(510,650)"/>
    <wire from="(430,440)" to="(700,440)"/>
    <wire from="(560,510)" to="(560,570)"/>
    <wire from="(1000,500)" to="(1000,620)"/>
    <wire from="(480,570)" to="(560,570)"/>
    <wire from="(870,180)" to="(880,180)"/>
    <comp lib="1" loc="(1030,490)" name="OR Gate">
      <a name="size" val="30"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="0" loc="(1060,870)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" equal"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(170,680)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="should be always 0"/>
    </comp>
    <comp lib="2" loc="(520,1030)" name="Decoder">
      <a name="facing" val="north"/>
      <a name="select" val="3"/>
    </comp>
    <comp lib="1" loc="(470,660)" name="AND Gate">
      <a name="facing" val="west"/>
      <a name="size" val="30"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="1" loc="(720,330)" name="Controlled Buffer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="1" loc="(720,710)" name="Controlled Buffer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1070,490)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val="carry out"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp loc="(450,730)" name="8 bit comparator">
      <a name="label" val="ADD"/>
    </comp>
    <comp lib="0" loc="(420,1030)" name="Pin">
      <a name="width" val="3"/>
      <a name="tristate" val="false"/>
      <a name="label" val="op code"/>
    </comp>
    <comp lib="1" loc="(430,440)" name="NOT Gate">
      <a name="width" val="8"/>
    </comp>
    <comp lib="6" loc="(527,1699)" name="Text">
      <a name="text" val="How It Works"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="6" loc="(593,1445)" name="Text">
      <a name="text" val=". XOR: Mixes ‘a’ and ‘b’ in a special way (like a secret code)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(440,240)" name="OR Gate">
      <a name="width" val="8"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="6" loc="(868,1148)" name="Text">
      <a name="text" val="Approach :The ALU is a Toolbox!"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp lib="0" loc="(360,770)" name="Splitter">
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
      <a name="bit0" val="7"/>
      <a name="bit1" val="6"/>
      <a name="bit2" val="5"/>
      <a name="bit3" val="4"/>
      <a name="bit4" val="3"/>
      <a name="bit5" val="2"/>
      <a name="bit6" val="1"/>
      <a name="bit7" val="0"/>
    </comp>
    <comp lib="6" loc="(624,1766)" name="Text">
      <a name="text" val=". A decoder (like a tool selector) turns on one tool using the “op” code."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(850,200)" name="Splitter">
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="0" loc="(470,640)" name="Clock">
      <a name="label" val="Rclk"/>
    </comp>
    <comp lib="1" loc="(440,330)" name="AND Gate">
      <a name="width" val="8"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="6" loc="(1190,1825)" name="Text">
      <a name="text" val=". SHL and SHR have little storage boxes (registers) that save their inputs and outputs, and they only work when a clock (clk) says “go” (clk = 1). We’ll explain the clock next chapter—it’s like a timer that keeps everything in sync!"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(980,160)" name="OR Gate">
      <a name="inputs" val="8"/>
    </comp>
    <comp lib="6" loc="(606,1478)" name="Text">
      <a name="text" val=". OR: Combines ‘a’ and ‘b’ (if either has a 1, the result gets a 1)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(1030,160)" name="NOT Gate"/>
    <comp lib="6" loc="(860,1330)" name="Text">
      <a name="text" val="What’s Inside the Toolbox?"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp lib="0" loc="(490,520)" name="Clock">
      <a name="label" val="Lclk"/>
    </comp>
    <comp lib="6" loc="(536,1545)" name="Text">
      <a name="text" val=". NOT: Flips ‘a’ (turns 1s to 0s and 0s to 1s)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(720,440)" name="Controlled Buffer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="6" loc="(586,1236)" name="Text">
      <a name="text" val="It has 7 tools inside, and you pick one tool at a time to use!"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(611,1580)" name="Text">
      <a name="text" val=". SHL: Slides ‘a’ left by 1 spot (like 10101010 becomes 01010100)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(884,1934)" name="Text">
      <a name="text" val="The ALU is your computer’s handyman, doing all the math and comparing jobs, and the clock makes sure SHL and SHR work at the right time!"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(450,560)" name="AND Gate">
      <a name="facing" val="west"/>
      <a name="size" val="30"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="0" loc="(1060,840)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" 'a' larger"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="1" loc="(450,160)" name="XOR Gate">
      <a name="width" val="8"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="6" loc="(675,1797)" name="Text">
      <a name="text" val=". The tool’s 8-bit result goes to the “Result” output, but only one tool works at a time!"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(522,1895)" name="Text">
      <a name="text" val="Why It’s Cool"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="6" loc="(541,1513)" name="Text">
      <a name="text" val=". AND: Checks where ‘a’ and ‘b’ both have 1s."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(734,1739)" name="Text">
      <a name="text" val=". You give it ‘a’, ‘b’, a “Carry In” bit, and a 3-bit “op” code to pick the tool (like 000 for XOR, 100 for SHL)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(1080,160)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" zero"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="6" loc="(526,1386)" name="Text">
      <a name="text" val="7 Tools:"/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp loc="(440,480)" name="Left shifter">
      <a name="label" val="SHL"/>
    </comp>
    <comp lib="1" loc="(720,600)" name="Controlled Buffer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="6" loc="(615,1652)" name="Text">
      <a name="text" val=". Comparator: Tells if ‘a’ is bigger than ‘b’ or if they’re the same."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp loc="(440,600)" name="Right shifter">
      <a name="label" val="SHR"/>
    </comp>
    <comp lib="6" loc="(920,1198)" name="Text">
      <a name="text" val="Think of the ALU as a magical toolbox that helps your computer do math and logic stuff with two 8-bit numbers, ‘a’ and ‘b’ (like 10101010 and 11001100)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(720,490)" name="Controlled Buffer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(180,490)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="carry in "/>
    </comp>
    <comp lib="6" loc="(618,1617)" name="Text">
      <a name="text" val=". SHR: Slides ‘a’ right by 1 spot (like 10101010 becomes 01010101)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(720,240)" name="Controlled Buffer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(490,720)" name="Splitter">
      <a name="facing" val="west"/>
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="0" loc="(190,400)" name="Pin">
      <a name="width" val="8"/>
      <a name="tristate" val="false"/>
      <a name="label" val="a "/>
    </comp>
    <comp lib="6" loc="(835,1856)" name="Text">
      <a name="text" val=". Extra outputs: “Zero” (lights up if Result is 00000000), “A Larger” (lights up if ‘a’ is bigger), and “Equal” (lights up if ‘a’ equals ‘b’)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(370,850)" name="Splitter">
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
      <a name="bit0" val="7"/>
      <a name="bit1" val="6"/>
      <a name="bit2" val="5"/>
      <a name="bit3" val="4"/>
      <a name="bit4" val="3"/>
      <a name="bit5" val="2"/>
      <a name="bit6" val="1"/>
      <a name="bit7" val="0"/>
    </comp>
    <comp lib="1" loc="(720,160)" name="Controlled Buffer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(190,440)" name="Pin">
      <a name="width" val="8"/>
      <a name="tristate" val="false"/>
      <a name="label" val="b "/>
    </comp>
    <comp lib="0" loc="(1070,330)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
      <a name="labelloc" val="east"/>
    </comp>
  </circuit>
  <circuit name="bus 1">
    <a name="circuit" val="bus 1"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(470,330)" to="(520,330)"/>
    <wire from="(520,380)" to="(520,510)"/>
    <wire from="(820,310)" to="(820,380)"/>
    <wire from="(510,370)" to="(510,510)"/>
    <wire from="(460,310)" to="(460,510)"/>
    <wire from="(920,180)" to="(920,210)"/>
    <wire from="(500,360)" to="(500,510)"/>
    <wire from="(480,340)" to="(580,340)"/>
    <wire from="(880,310)" to="(880,390)"/>
    <wire from="(900,210)" to="(920,210)"/>
    <wire from="(490,350)" to="(490,510)"/>
    <wire from="(480,340)" to="(480,510)"/>
    <wire from="(490,350)" to="(640,350)"/>
    <wire from="(470,330)" to="(470,510)"/>
    <wire from="(500,360)" to="(700,360)"/>
    <wire from="(480,180)" to="(540,180)"/>
    <wire from="(540,180)" to="(600,180)"/>
    <wire from="(600,180)" to="(660,180)"/>
    <wire from="(660,180)" to="(720,180)"/>
    <wire from="(510,370)" to="(760,370)"/>
    <wire from="(720,180)" to="(780,180)"/>
    <wire from="(780,180)" to="(840,180)"/>
    <wire from="(840,180)" to="(880,180)"/>
    <wire from="(580,310)" to="(580,340)"/>
    <wire from="(480,180)" to="(480,260)"/>
    <wire from="(540,180)" to="(540,260)"/>
    <wire from="(600,180)" to="(600,260)"/>
    <wire from="(660,180)" to="(660,260)"/>
    <wire from="(720,180)" to="(720,260)"/>
    <wire from="(780,180)" to="(780,260)"/>
    <wire from="(840,180)" to="(840,260)"/>
    <wire from="(520,310)" to="(520,330)"/>
    <wire from="(520,380)" to="(820,380)"/>
    <wire from="(680,90)" to="(680,260)"/>
    <wire from="(740,90)" to="(740,260)"/>
    <wire from="(640,310)" to="(640,350)"/>
    <wire from="(560,90)" to="(560,260)"/>
    <wire from="(620,90)" to="(620,260)"/>
    <wire from="(800,90)" to="(800,260)"/>
    <wire from="(860,90)" to="(860,260)"/>
    <wire from="(530,390)" to="(880,390)"/>
    <wire from="(920,210)" to="(950,210)"/>
    <wire from="(440,90)" to="(440,260)"/>
    <wire from="(500,90)" to="(500,260)"/>
    <wire from="(530,390)" to="(530,510)"/>
    <wire from="(760,310)" to="(760,370)"/>
    <wire from="(700,310)" to="(700,360)"/>
    <wire from="(540,530)" to="(540,580)"/>
    <wire from="(910,180)" to="(920,180)"/>
    <wire from="(900,210)" to="(900,260)"/>
    <comp lib="0" loc="(540,530)" name="Splitter">
      <a name="facing" val="north"/>
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="0" loc="(500,90)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
    </comp>
    <comp lib="1" loc="(820,310)" name="AND Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="0" loc="(560,90)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
    </comp>
    <comp lib="1" loc="(880,310)" name="OR Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="0" loc="(800,90)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
    </comp>
    <comp lib="0" loc="(950,210)" name="Pin">
      <a name="facing" val="west"/>
      <a name="tristate" val="false"/>
      <a name="label" val=" bus 1"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(680,90)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
    </comp>
    <comp lib="1" loc="(880,180)" name="NOT Gate">
      <a name="facing" val="west"/>
    </comp>
    <comp lib="0" loc="(860,90)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
      <a name="label" val=" LSB"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(620,90)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
    </comp>
    <comp lib="1" loc="(640,310)" name="AND Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="1" loc="(580,310)" name="AND Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="1" loc="(700,310)" name="AND Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="0" loc="(440,90)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
      <a name="label" val="MSB"/>
    </comp>
    <comp lib="1" loc="(760,310)" name="AND Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="0" loc="(540,580)" name="Pin">
      <a name="facing" val="north"/>
      <a name="width" val="8"/>
      <a name="tristate" val="false"/>
      <a name="label" val=" OUTPUT"/>
      <a name="labelloc" val="south"/>
    </comp>
    <comp lib="0" loc="(740,90)" name="Pin">
      <a name="facing" val="south"/>
      <a name="tristate" val="false"/>
    </comp>
    <comp lib="1" loc="(520,310)" name="AND Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="1" loc="(460,310)" name="AND Gate">
      <a name="facing" val="south"/>
      <a name="inputs" val="2"/>
    </comp>
  </circuit>
  <circuit name="clock">
    <a name="circuit" val="clock"/>
    <a name="clabel" val=" clk d "/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(650,480)" to="(650,490)"/>
    <wire from="(670,890)" to="(670,900)"/>
    <wire from="(670,890)" to="(720,890)"/>
    <wire from="(640,880)" to="(640,1010)"/>
    <wire from="(530,470)" to="(590,470)"/>
    <wire from="(550,880)" to="(610,880)"/>
    <wire from="(620,300)" to="(680,300)"/>
    <wire from="(640,880)" to="(1660,880)"/>
    <wire from="(720,990)" to="(780,990)"/>
    <wire from="(720,1050)" to="(780,1050)"/>
    <wire from="(530,300)" to="(570,300)"/>
    <wire from="(1640,470)" to="(1640,480)"/>
    <wire from="(1660,880)" to="(1660,890)"/>
    <wire from="(590,470)" to="(590,490)"/>
    <wire from="(610,880)" to="(610,900)"/>
    <wire from="(440,470)" to="(480,470)"/>
    <wire from="(460,880)" to="(500,880)"/>
    <wire from="(720,890)" to="(1660,890)"/>
    <wire from="(530,300)" to="(530,340)"/>
    <wire from="(440,510)" to="(530,510)"/>
    <wire from="(530,470)" to="(530,510)"/>
    <wire from="(550,880)" to="(550,920)"/>
    <wire from="(620,300)" to="(620,340)"/>
    <wire from="(460,920)" to="(550,920)"/>
    <wire from="(530,880)" to="(550,880)"/>
    <wire from="(600,300)" to="(620,300)"/>
    <wire from="(650,480)" to="(1640,480)"/>
    <wire from="(810,1000)" to="(900,1000)"/>
    <wire from="(810,1060)" to="(900,1060)"/>
    <wire from="(510,470)" to="(530,470)"/>
    <wire from="(610,880)" to="(640,880)"/>
    <wire from="(530,340)" to="(620,340)"/>
    <wire from="(440,470)" to="(440,510)"/>
    <wire from="(590,470)" to="(1640,470)"/>
    <wire from="(720,890)" to="(720,990)"/>
    <wire from="(460,880)" to="(460,920)"/>
    <wire from="(640,1010)" to="(640,1070)"/>
    <wire from="(720,990)" to="(720,1050)"/>
    <wire from="(640,1010)" to="(780,1010)"/>
    <wire from="(640,1070)" to="(780,1070)"/>
    <wire from="(660,1380)" to="(800,1380)"/>
    <comp lib="0" loc="(680,300)" name="Pin">
      <a name="facing" val="west"/>
      <a name="tristate" val="false"/>
      <a name="label" val=" clk"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(610,900)" name="Pin">
      <a name="facing" val="north"/>
      <a name="tristate" val="false"/>
      <a name="label" val="clk"/>
      <a name="labelloc" val="south"/>
    </comp>
    <comp lib="6" loc="(1168,1281)" name="Text">
      <a name="text" val=". Set the Ticks: Double-click the Clock to set its timing. “High Duration” is how long it’s on (1), and “Low Duration” is how long it’s off (0). For example, set both to 1 tick for a simple 0, 1, 0, 1 pattern."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(650,490)" name="Pin">
      <a name="facing" val="north"/>
      <a name="tristate" val="false"/>
      <a name="label" val="clk"/>
      <a name="labelloc" val="south"/>
    </comp>
    <comp lib="6" loc="(1286,1208)" name="Text">
      <a name="text" val="These three circuits are just to explain how a clock works—we don’t need to build them in Logisim. Logisim has a built-in Clock component that already gives us a clock signal (0, 1, 0, 1 …), so we’ll use that instead to save time and keep things simple."/>
      <a name="font" val="Verdana bold 13"/>
    </comp>
    <comp lib="6" loc="(783,108)" name="Text">
      <a name="text" val="How it works"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp lib="0" loc="(900,1060)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val="clk s"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(800,1380)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="6" loc="(849,1249)" name="Text">
      <a name="text" val=". Add the Clock: Go to the “Wiring” library in Logisim, pick the “Clock” component, and place it in your circuit."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(900,1000)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" clk e"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="1" loc="(810,1000)" name="OR Gate">
      <a name="size" val="30"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="1" loc="(510,470)" name="NOT Gate"/>
    <comp lib="6" loc="(1505,825)" name="Text">
      <a name="text" val=". Why This Timing Matters: Since clk e stays on longer, the number is ready on the bus when clk s turns on. This makes sure the second storage box gets the correct number before the first storage box stops sending it, avoiding any mistakes."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(1317,568)" name="Text">
      <a name="text" val=". The clock’s job is to time when data moves: first, enable a “from” register to send data on the bus, then enable a “to” register to capture it, ensuring the “to” register grabs the data before the “from” register turns off."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(590,490)" name="Pin">
      <a name="facing" val="north"/>
      <a name="tristate" val="false"/>
      <a name="label" val="clk"/>
      <a name="labelloc" val="south"/>
    </comp>
    <comp lib="6" loc="(819,603)" name="Text">
      <a name="text" val=". The clock sets the pace for the whole computer, like a drummer keeping the beat."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(1609,791)" name="Text">
      <a name="text" val=". clk s (from the AND): This signal turns on later, right in the middle of when clk e is on, and it’s on for a shorter time. It’s like opening a second gate to let another storage box grab the number from the bus and save it, but only after the number has had time to arrive safely."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(1631,160)" name="Text">
      <a name="text" val="The clock is a bit that flips between on (1) and off (0) super fast :billions of times per second, or gigahertz ( it was decided to use a name of a nerd scientist who lived in Germany who did some of the early research in 1800's that led up to radio to use his name to describe how fast electricity was going on and off persecond )setting the timing for the whole computer."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(1301,756)" name="Text">
      <a name="text" val=". clk e (from the OR): This signal turns on first and stays on longer. It’s like opening a gate to let the first storage box put its number onto the bus, giving the number plenty of time to travel."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(1134,1318)" name="Text">
      <a name="text" val=". Make It Work: To see the clock in action, press Ctrl+K (or go to Simulate → Ticks Enabled). This starts the ticks, and the clock will flip between 0 and 1 automatically during the simulation."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(839,245)" name="Text">
      <a name="text" val="It’s made by connecting a NOT gate’s output back to its input, creating a loop that keeps flipping the bit (1 → 0 → 1 → 0 …):"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(2115,709)" name="Text">
      <a name="text" val="The third circuit is really helpful because it makes two special signals—clk e and clk s—that work together to move data safely inside the computer. Imagine the computer has little storage boxes (we’ll call them storage boxes for now) that hold numbers, like 10101010. We need to move a number from one storage box to another through a shared path called the bus, but we have to make sure the number doesn’t get mixed up or lost."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(994,664)" name="Text">
      <a name="text" val="Now we're going to do something fairly simple. We will take the original clock and the delayed clock, and both AND them and OR them to create two new bits, like so:"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(780,418)" name="Text">
      <a name="text" val="To slow it down, you add a longer wire or use a resistor (delaying the signal by about a quarter of a cycle):"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(670,900)" name="Pin">
      <a name="facing" val="north"/>
      <a name="tristate" val="false"/>
      <a name="label" val="clk"/>
      <a name="labelloc" val="south"/>
    </comp>
    <comp lib="1" loc="(810,1060)" name="AND Gate">
      <a name="size" val="30"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="1" loc="(530,880)" name="NOT Gate"/>
    <comp lib="1" loc="(600,300)" name="NOT Gate"/>
    <comp lib="0" loc="(660,1380)" name="Clock"/>
  </circuit>
  <circuit name="clock we gonna use">
    <a name="circuit" val="clock we gonna use"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(260,220)" to="(320,220)"/>
    <wire from="(260,170)" to="(320,170)"/>
    <wire from="(230,170)" to="(260,170)"/>
    <wire from="(260,170)" to="(260,220)"/>
    <wire from="(280,150)" to="(280,200)"/>
    <wire from="(350,160)" to="(380,160)"/>
    <wire from="(350,210)" to="(380,210)"/>
    <wire from="(280,200)" to="(320,200)"/>
    <wire from="(280,150)" to="(320,150)"/>
    <wire from="(230,150)" to="(280,150)"/>
    <comp lib="0" loc="(380,160)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val=" clk e"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(230,170)" name="Clock">
      <a name="highDuration" val="2"/>
      <a name="label" val="clk d "/>
    </comp>
    <comp lib="6" loc="(124,178)" name="Text">
      <a name="text" val="2 ticks on high"/>
    </comp>
    <comp lib="6" loc="(979,182)" name="Text">
      <a name="text" val=". The Clock component has two settings: “High Duration” (how many ticks the clock is on, or 1) and “Low Duration” (how many ticks it’s off, or 0)."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="1" loc="(350,160)" name="OR Gate">
      <a name="size" val="30"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="6" loc="(1499,226)" name="Text">
      <a name="text" val=". If you make the High Duration longer (more ticks), the clock stays on longer, which slows down the overall on-off cycle. For example, High Duration of 2 ticks and Low Duration of 1 tick means the clock is on for 2 ticks, off for 1 tick, repeating every 3 ticks—slower than 1 tick on, 1 tick off."/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="0" loc="(230,150)" name="Clock">
      <a name="label" val="clk "/>
    </comp>
    <comp lib="1" loc="(350,210)" name="AND Gate">
      <a name="size" val="30"/>
      <a name="inputs" val="2"/>
    </comp>
    <comp lib="6" loc="(1190,145)" name="Text">
      <a name="text" val=". It’s In Logisim, a “tick” is like a tiny step in the simulation—it’s how time moves forward. by connecting a NOT gate’s output back to its input, creating a loop that keeps flipping the bit (1 → 0 → 1 → 0 …):"/>
      <a name="font" val="SansSerif bold 14"/>
    </comp>
    <comp lib="6" loc="(773,98)" name="Text">
      <a name="text" val="Ticks and Clock Speed:"/>
      <a name="font" val="Simplified Arabic Fixed bold 16"/>
    </comp>
    <comp lib="6" loc="(126,156)" name="Text">
      <a name="text" val="1 tick on high/low"/>
    </comp>
    <comp lib="0" loc="(380,210)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="label" val="clk s"/>
      <a name="labelloc" val="east"/>
    </comp>
  </circuit>
</project>
